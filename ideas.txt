# signup - display first
# login
# logout

# patient journey
homepage:
navigate to contact - homepage 
navigate to book appointment - homepage
see your appointments

# therapist journey
homepage:
see appointments
cancel appointments
create appointments
pending request
accepted requests
pending requests
#models:
#accounts:
profile

# patient:
Appointment
Contact

#emails
send email to patient on create booking
send email to therapist on create booking
send email to therapist on create contact

send email command:
python -m smtpd -n -c DebuggingServer localhost:1025




        email_message_user = f'''
        Hello {appoint.original_request.user.user.username}, your request for an appointment at: {appoint.original_request.start_time} , {appoint.original_request.appointment_date}
        is not available, are you free at {appoint.start_time}, {appoint.appointment_date} ?
        '''
        # message_to_user = EmailMessage(
        #     'Appointment Request',
        #     email_message_user,
        #     therapist_email,
        #     [appoint.original_request.user.user.email],
        #     reply_to=[therapist_email],
        # )
# change appointment_date and user idea
def appointment_update_date_validation(appointment_date, start_time, disabled_days, instance):
    print(appointment_date.weekday())
    original_appointment = AppointmentResponse.objects.filter(start_time=start_time, appointment_date=appointment_date, is_approved=True)
    appointment = Appointment.objects.filter(start_time=start_time, appointment_date=appointment_date, is_approved=True)
    pending_original_appointment = AppointmentResponse.objects.filter(start_time=start_time, appointment_date=appointment_date, choice='P')
    if appointment.exists() or original_appointment.exists() or pending_original_appointment.exists():
        if not instance.start_time == start_time or not instance.appointment_date == appointment_date: # if the time for the appointment is the same we can safely change the user
            raise forms.ValidationError('No Available Appointments for date and time specified. please choose another another time or date')
    elif appointment_date.weekday() in disabled_days:
        raise forms.ValidationError('you cannot ask for a meeting on a weekend')
    elif appointment_date <= date.today():
        raise forms.ValidationError('you cannot ask for a meeting for today or a past date')
    return appointment_date